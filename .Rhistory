left_join(sites_absence_bad_no,by = groupGeo) %>%
left_join(sites_absence_bad2,by = groupGeo) %>%
left_join(sites_worse_togood,by = groupGeo) %>%
left_join(sites_majority_bad,by = groupGeo) %>%
left_join(sites_evolution,by = groupGeo)%>%
left_join(sites_collapse_sm,by=groupGeo)
# fix all binary columns for select_multiple question and correct for skip logic
sites<-bind_rows(template_data,sites) %>%prepdata(.,T)
sites<-split_multiple_choice(sites,questions,choices,".")
# Skip Logic as empty cells
# sites_slempty<-sl_correction(sites,recode_sl,questions,sl = "")
# Skip Logic as SL
sites_sl<-sl_correction(sites,recode_sl,questions,sl = "SL")
# Analysis on aggregated data
analyze_sl <- sites_sl %>% select_if(~ !(all(is.na(.x)))) %>% select(-localite) %>%
mutate(departement = paste0(departement,"_dep"),
commune = paste0(commune,"_comm"))
xml_sl <-table_maker(data = analyze_sl,
questionnaire = questions,
choices = choices,
weighting_function = NULL,
labels = F,
language = NULL,
main_col_name = "Overall",
count = NULL,
aggregated = TRUE)
View(xml_sl)
debugonce(table_maker)
xml_sl <-table_maker(data = analyze_sl,
questionnaire = questions,
choices = choices,
weighting_function = NULL,
labels = F,
language = NULL,
main_col_name = "Overall",
count = NULL,
aggregated = TRUE)
# collecting strata information
strata <- list(...)
strata <- strata[!is.na(strata)]
strata <- unlist(strata)
# remove the text column for select multiple
sel_mul <- filter(questionnaire, str_detect(type, "select_multiple"))$name
data <- select(data, -one_of(sel_mul))
analysis_names <- names(data)
# detect which are in the questionnaire
in_questionnaire <- analysis_names %in% questionnaire$name
table_output <- bind_rows(map2(analysis_names,
in_questionnaire,
analyzer,
data,
main_col_name,
count))
View(table_output)
aggregated
sel_mul<-sel_mul[sel_mul%!in% recode_sl$name]
sel_mul_rgx <- paste0(sel_mul, "(\\/|\\.)")
sel_mul_extract_rgx <- paste0("(", str_c(sel_mul, collapse = "|"), ")")
sel_mul_remove_rgx <- paste0("(", str_c(sel_mul_rgx, collapse = "|"), ")")
table_output <- table_output %>%
mutate(sel_mul = str_extract(indicateurs, sel_mul_extract_rgx))
avg_indices <- which(table_output[, 1] == "Moyenne")
avg_indices <- avg_indices[str_detect(table_output[avg_indices - 1, 1], sel_mul_remove_rgx)]
avg_indices
length(avg_indices)>0
table_output[avg_indices - 1, 1]
table_output[avg_indices, 1]
(table_output[avg_indices - 3, "sel_mul"] == table_output[avg_indices - 1, "sel_mul"])
table_output <- table_output %>% select(-sel_mul)
View(table_output)
aggregated
View(table_output)
aggregated
sl_mul_rgx <- paste0(recode_sl$name, "(\\/|\\.)")
sl_mul_extract_rgx <- paste0("(", str_c(recode_sl$name, collapse = "|"), ")")
sl_mul_remove_rgx <- paste0("(", str_c(sl_mul_rgx, collapse = "|"), ")")
sl_mul_extract_rgx
avg_indices <- which(table_output[, 1] == "Moyenne")
avg_indices
length(avg_indices)>0
table_output <- table_output %>% select(-sl_mul)
table_output[,1] <- ifelse(table_output[,2] == main_col_name & str_detect(table_output[,1], sel_mul_remove_rgx),
str_extract(table_output[,1], sel_mul_extract_rgx),
table_output[,1])
table_output[,1] <- ifelse(table_output[,2] != main_col_name,
str_remove_all(table_output[,1], sel_mul_remove_rgx),
table_output[,1])
View(table_output)
sel_mul_remove_rgx
aggregated&length(avg_indices)>0
source('C:/Users/Admin/Desktop/Hedi/github/protection2021/code/table_function.R')
xml_sl <-table_maker(data = analyze_sl,
questionnaire = questions,
choices = choices,
weighting_function = NULL,
labels = F,
language = NULL,
main_col_name = "Overall",
count = NULL,
aggregated = TRUE)
View(xml_sl)
xml_sl <-table_maker(data = analyze_sl,
questionnaire = questions,
choices = choices,
weighting_function = NULL,
labels = F,
language = NULL,
main_col_name = "Overall",
count = NULL,
aggregated = TRUE,
"departement",
"commune")
label_sl <-table_maker(data = analyze_sl,
questionnaire = questions,
choices = choices,
weighting_function = NULL,
labels = T,
language = NULL,
main_col_name= "Overall",
count = NULL,
aggregated = TRUE,
"departement",
"commune")
xml_count_sl <-table_maker(data = analyze_sl,
questionnaire = questions,
choices = choices,
weighting_function = NULL,
labels = F,
language = NULL,
main_col_name = "Overall",
count = TRUE,
aggregated = TRUE,
"departement",
"commune")
label_count_sl <-table_maker(data = analyze_sl,
questionnaire = questions,
choices = choices,
weighting_function = NULL,
labels = T,
language = NULL,
main_col_name= "Overall",
count = TRUE,
aggregated = TRUE,
"departement",
"commune")
View(xml_count_sl)
##### Analysis on aggregated data with skip logic coded as NAs
analyze_slna <- sites_slna %>% select_if(~ !(all(is.na(.x)))) %>% select(-localite) %>%
mutate(departement = paste0(departement,"_dep"),
commune = paste0(commune,"_comm"))
# Skip Logic as NA (for analysis purpose)
sites_slna<-sl_correction(sites,recode_sl,questions)
##### Analysis on aggregated data with skip logic coded as NAs
analyze_slna <- sites_slna %>% select_if(~ !(all(is.na(.x)))) %>% select(-localite) %>%
mutate(departement = paste0(departement,"_dep"),
commune = paste0(commune,"_comm"))
label_slna <-table_maker(data = analyze_slna,
questionnaire = questions,
choices = choices,
weighting_function = NULL,
labels = T,
language = NULL,
main_col_name= "Overall",
count = NULL,
aggregated = TRUE)
View(label_slna)
debugonce(table_maker)
label_slna <-table_maker(data = analyze_slna,
questionnaire = questions,
choices = choices,
weighting_function = NULL,
labels = T,
language = NULL,
main_col_name= "Overall",
count = NULL,
aggregated = TRUE)
# collecting strata information
strata <- list(...)
strata <- strata[!is.na(strata)]
strata <- unlist(strata)
# remove the text column for select multiple
sel_mul <- filter(questionnaire, str_detect(type, "select_multiple"))$name
data <- select(data, -one_of(sel_mul))
analysis_names <- names(data)
# detect which are in the questionnaire
in_questionnaire <- analysis_names %in% questionnaire$name
table_output <- bind_rows(map2(analysis_names,
in_questionnaire,
analyzer,
data,
main_col_name,
count))
aggregated
sel_mul<-sel_mul[sel_mul%!in% recode_sl$name]
sel_mul_rgx <- paste0(sel_mul, "(\\/|\\.)")
sel_mul_extract_rgx <- paste0("(", str_c(sel_mul, collapse = "|"), ")")
sel_mul_remove_rgx <- paste0("(", str_c(sel_mul_rgx, collapse = "|"), ")")
table_output <- table_output %>%
mutate(sel_mul = str_extract(indicateurs, sel_mul_extract_rgx))
avg_indices <- which(table_output[, 1] == "Moyenne")
avg_indices <- avg_indices[str_detect(table_output[avg_indices - 1, 1], sel_mul_remove_rgx)]
length(avg_indices)>0
table_output[avg_indices, 1] <- table_output[avg_indices - 1, 1]
match_previous <- (table_output[avg_indices - 3, "sel_mul"] == table_output[avg_indices - 1, "sel_mul"])
match_previous[is.na(match_previous)] <- FALSE
rem_avg_indices <- avg_indices[match_previous]
table_output <- table_output[-(rem_avg_indices - 1), ] %>%
select(-sel_mul)
table_output[,1] <- ifelse(table_output[,2] == main_col_name & str_detect(table_output[,1], sel_mul_remove_rgx),
str_extract(table_output[,1], sel_mul_extract_rgx),
table_output[,1])
table_output[,1] <- ifelse(table_output[,2] != main_col_name,
str_remove_all(table_output[,1], sel_mul_remove_rgx),
table_output[,1])
View(table_output)
aggregated
sl_mul_rgx <- paste0(recode_sl$name, "(\\/|\\.)")
sl_mul_extract_rgx <- paste0("(", str_c(recode_sl$name, collapse = "|"), ")")
sl_mul_remove_rgx <- paste0("(", str_c(sl_mul_rgx, collapse = "|"), ")")
table_output <- table_output %>%
mutate(sl_mul = str_extract(indicateurs, sl_mul_extract_rgx))
avg_indices <- which(table_output[, 1] == "Moyenne")
length(avg_indices)>0
table_output <- table_output %>% select(-sl_mul)
View(table_output)
aggregated&length(avg_indices)>0
is.null(language)
label_col <- "label"
choice_indices <- match(table_output$indicateurs, choices$name)
choice_indices
choice_labels <- choices[[label_col]]
choice_labels
question_indices <- match(table_output$indicateurs, questionnaire$name)
question_labels <- questionnaire[[label_col]]
table_output <- table_output %>%
mutate(indicateurs = ifelse(is.na(question_indices),
indicateurs,
ifelse(is.na(question_labels[question_indices]) | question_labels[question_indices] == "",
indicateurs,
question_labels[question_indices])),
indicateurs = ifelse(is.na(choice_indices),
indicateurs,
choice_labels[choice_indices]))
View(table_output)
View(xml_sl)
View(label_sl)
View(xml_count_sl)
View(xml_sl)
label_sl
View(choices)
View(questions)
questionnaire<-questions
label_col <- "label"
table_output<-xml_sl
choice_indices <- match(table_output$indicateurs, choices$name)
choice_indices
choice_labels <- choices[[label_col]]
choice_labels
question_indices <- match(table_output$indicateurs, questionnaire$name)
question_labels <- questionnaire[[label_col]]
question_indices
question_labels[question_indices]
choice_labels[choice_indices]
table_output2 <- table_output %>%
mutate(indicateurs = ifelse(is.na(question_indices),
indicateurs,
ifelse(is.na(question_labels[question_indices]) | question_labels[question_indices] == "",
indicateurs,
question_labels[question_indices])),
indicateurs = ifelse(is.na(choice_indices),
indicateurs,
choice_labels[choice_indices]))
View(table_output2)
xml_sl
View(xml_sl)
View(table_output2)
View(xml_count_sl)
View(label_count_sl)
table_output<-label_count_sl
choice_indices <- match(table_output$indicateurs, choices$name)
choice_labels <- choices[[label_col]]
question_indices <- match(table_output$indicateurs, questionnaire$name)
question_labels <- questionnaire[[label_col]]
table_output3 <- table_output %>%
mutate(indicateurs = ifelse(is.na(question_indices),
indicateurs,
ifelse(is.na(question_labels[question_indices]) | question_labels[question_indices] == "",
indicateurs,
question_labels[question_indices])),
indicateurs = ifelse(is.na(choice_indices),
indicateurs,
choice_labels[choice_indices]))
View(table_output3)
choice_indices <- match(table_output$indicateurs, choices$name)
choice_labels <- choices[[label_col]]
question_indices <- match(table_output$indicateurs, questionnaire$name)
question_labels <- questionnaire[[label_col]]
choice_indices
table_output$indicateurs
View(table_output)
xml_count
View(xml_count_sl)
table_output<-xml_count_sl
choice_indices <- match(table_output$indicateurs, choices$name)
choice_labels <- choices[[label_col]]
question_indices <- match(table_output$indicateurs, questionnaire$name)
question_labels <- questionnaire[[label_col]]
table_output3 <- table_output %>%
mutate(indicateurs = ifelse(is.na(question_indices),
indicateurs,
ifelse(is.na(question_labels[question_indices]) | question_labels[question_indices] == "",
indicateurs,
question_labels[question_indices])),
indicateurs = ifelse(is.na(choice_indices),
indicateurs,
choice_labels[choice_indices]))
View(table_output3)
View(table_output3)
View(sites_slna)
##### Analysis on aggregated data with skip logic coded as NAs
analyze_slna <- sites_slna %>% select_if(~ !(all(is.na(.x)))) %>% select(-localite) %>%
mutate(departement = paste0(departement,"_dep"),
commune = paste0(commune,"_comm"))
source('C:/Users/Admin/Desktop/Hedi/github/protection2021/code/table_function.R')
xml_slna <-table_maker(data = analyze_slna,
questionnaire = questions,
choices = choices,
weighting_function = NULL,
labels = F,
language = NULL,
main_col_name = "Overall",
count = NULL,
aggregated = TRUE)
View(xml_slna)
debugonce(table_maker)
xml_slna <-table_maker(data = analyze_slna,
questionnaire = questions,
choices = choices,
weighting_function = NULL,
labels = F,
language = NULL,
main_col_name = "Overall",
count = NULL,
aggregated = TRUE)
# collecting strata information
strata <- list(...)
strata <- strata[!is.na(strata)]
strata <- unlist(strata)
# remove the text column for select multiple
sel_mul <- filter(questionnaire, str_detect(type, "select_multiple"))$name
data <- select(data, -one_of(sel_mul))
analysis_names <- names(data)
# detect which are in the questionnaire
in_questionnaire <- analysis_names %in% questionnaire$name
table_output <- bind_rows(map2(analysis_names,
in_questionnaire,
analyzer,
data,
main_col_name,
count))
View(table_output)
aggregated
sel_mul<-sel_mul[sel_mul%!in% recode_sl$name]
sel_mul_rgx <- paste0(sel_mul, "(\\/|\\.)")
sel_mul_extract_rgx <- paste0("(", str_c(sel_mul, collapse = "|"), ")")
sel_mul_remove_rgx <- paste0("(", str_c(sel_mul_rgx, collapse = "|"), ")")
table_output <- table_output %>%
mutate(sel_mul = str_extract(indicateurs, sel_mul_extract_rgx))
View(table_output)
avg_indices <- which(table_output[, 1] == "Moyenne")
avg_indices <- avg_indices[str_detect(table_output[avg_indices - 1, 1], sel_mul_remove_rgx)]
length(avg_indices)>0
avg_indices
View(table_output)
table_output[avg_indices, 1] <- table_output[avg_indices - 1, 1]
match_previous <- (table_output[avg_indices - 3, "sel_mul"] == table_output[avg_indices - 1, "sel_mul"])
match_previous[is.na(match_previous)] <- FALSE
rem_avg_indices <- avg_indices[match_previous]
table_output <- table_output[-(rem_avg_indices - 1), ] %>%
select(-sel_mul)
table_output[,1] <- ifelse(table_output[,2] == main_col_name & str_detect(table_output[,1], sel_mul_remove_rgx),
str_extract(table_output[,1], sel_mul_extract_rgx),
table_output[,1])
table_output[,1] <- ifelse(table_output[,2] != main_col_name,
str_remove_all(table_output[,1], sel_mul_remove_rgx),
table_output[,1])
View(table_output)
debugonce(table_maker)
xml_slna <-table_maker(data = analyze_slna,
questionnaire = questions,
choices = choices,
weighting_function = NULL,
labels = F,
language = NULL,
main_col_name = "Overall",
count = NULL,
aggregated = TRUE)
# collecting strata information
strata <- list(...)
strata <- strata[!is.na(strata)]
strata <- unlist(strata)
# remove the text column for select multiple
sel_mul <- filter(questionnaire, str_detect(type, "select_multiple"))$name
data <- select(data, -one_of(sel_mul))
analysis_names <- names(data)
# detect which are in the questionnaire
in_questionnaire <- analysis_names %in% questionnaire$name
table_output <- bind_rows(map2(analysis_names,
in_questionnaire,
analyzer,
data,
main_col_name,
count))
sel_mul<-sel_mul[sel_mul%!in% recode_sl$name]
sel_mul_rgx <- paste0(sel_mul, "(\\/|\\.)")
sel_mul_extract_rgx <- paste0("(", str_c(sel_mul, collapse = "|"), ")")
sel_mul_remove_rgx <- paste0("(", str_c(sel_mul_rgx, collapse = "|"), ")")
table_output <- table_output %>%
mutate(sel_mul = str_extract(indicateurs, sel_mul_extract_rgx))
View(table_output)
source('C:/Users/Admin/Desktop/Hedi/github/protection2021/code/table_function.R')
xml_slna <-table_maker(data = analyze_slna,
questionnaire = questions,
choices = choices,
weighting_function = NULL,
labels = F,
language = NULL,
main_col_name = "Overall",
count = NULL,
aggregated = TRUE)
View(xml_slna)
xml_slna <-table_maker(data = analyze_slna,
questionnaire = questions,
choices = choices,
weighting_function = NULL,
labels = T,
language = NULL,
main_col_name = "Overall",
count = NULL,
aggregated = TRUE)
View(xml_slna)
##### Analysis on aggregated data with skip logic coded as NAs
analyze_slna <- sites_slna %>% select_if(~ !(all(is.na(.x)))) %>% select(-localite) %>%
mutate(departement = paste0(departement,"_dep"),
commune = paste0(commune,"_comm"))
xml_slna <-table_maker(data = analyze_slna,
questionnaire = questions,
choices = choices,
weighting_function = NULL,
labels = F,
language = NULL,
main_col_name = "Overall",
count = NULL,
aggregated = TRUE,
"departement",
"commune")
xml_count_slna <-table_maker(data = analyze_slna,
questionnaire = questions,
choices = choices,
weighting_function = NULL,
labels = F,
language = NULL,
main_col_name = "Overall",
count = TRUE,
aggregated = TRUE,
"departement",
"commune")
View(xml_slna)
View(xml_count_slna)
table_output<-xml_slna
choice_indices <- match(table_output$indicateurs, choices$name)
choice_labels <- choices[[label_col]]
question_indices <- match(table_output$indicateurs, questionnaire$name)
question_labels <- questionnaire[[label_col]]
table_output4 <- table_output %>%
mutate(indicateurs = ifelse(is.na(question_indices),
indicateurs,
ifelse(is.na(question_labels[question_indices]) | question_labels[question_indices] == "",
indicateurs,
question_labels[question_indices])),
indicateurs = ifelse(is.na(choice_indices),
indicateurs,
choice_labels[choice_indices]))
View(table_output4)
table_output<-xml_count_slna
choice_indices <- match(table_output$indicateurs, choices$name)
choice_labels <- choices[[label_col]]
question_indices <- match(table_output$indicateurs, questionnaire$name)
question_labels <- questionnaire[[label_col]]
table_output5 <- table_output %>%
mutate(indicateurs = ifelse(is.na(question_indices),
indicateurs,
ifelse(is.na(question_labels[question_indices]) | question_labels[question_indices] == "",
indicateurs,
question_labels[question_indices])),
indicateurs = ifelse(is.na(choice_indices),
indicateurs,
choice_labels[choice_indices]))
writexl::write_xlsx(
x = list(
compiled_xml_results=xml_sl,
compiled_labeled_results=table_output2,
compiled_xml_results_counts=xml_count_sl,
compiled_labeled_counts=table_output3,
compiled_xml_results_slna=xml_slna,
compiled_labeled_slna=table_output4,
compiled_xml_counts_slna=xml_count_slna,
compiled_labeled_counts_slna=table_output5),
path = paste0("output/analysis/Prot_VBG-",humanTime(),".xlsx"),
col_names = T,
format_headers = T
)
